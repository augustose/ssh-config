#!/bin/bash

# ssh-config: Manage your SSH configurations easily from the command line.
#
# Author: Augusto Sosa Escalada <augustose@gmail.com>
# Version: 1.1.1
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ssh-config: Script to manage SSH configurations on macOS
# Options: add/a, comment/c, list/l, edit/e, update/u

CONFIG_FILE="$HOME/.ssh/config"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Ensure the config file exists
ensure_config_file() {
    if [ ! -d "$HOME/.ssh" ]; then
        mkdir -p "$HOME/.ssh"
        chmod 700 "$HOME/.ssh"
    fi
    
    if [ ! -f "$CONFIG_FILE" ]; then
        touch "$CONFIG_FILE"
        chmod 600 "$CONFIG_FILE"
    fi
}

# Show help message
show_help() {
    echo "ssh-config: Manage your SSH configurations easily from the command line."
    echo "Version: 1.1.1"
    echo ""
    echo "Usage: ssh-config [OPTION]"
    echo ""
    echo "Options:"
    echo "  add, -a, a       Add a new SSH configuration"
    echo "  comment, -c, c   Comment out an existing configuration by host name"
    echo "  list, -l, l      List all SSH configurations"
    echo "  edit, -e, e      Edit the SSH config file with VI"
    echo "  update, -u, u    Update an existing configuration"
    echo "  version, -v, v   Show version information"
    echo "  help, -h, h      Show this help message"
    echo ""
    echo "Examples:"
    echo "  ssh-config a           # Add new configuration"
    echo "  ssh-config c server    # Comment out 'server' configuration"
    echo "  ssh-config l           # List all configurations"
    echo "  ssh-config e           # Edit the config file with VI"
    echo "  ssh-config u           # Update an existing configuration"
    echo "  ssh-config v           # Show version"
    echo "  ssh-config h           # Show help"
}

# Show version information
show_version() {
    echo "ssh-config version 1.1.1"
    echo "SSH Configuration Manager"
    echo "Author: Augusto Sosa Escalada <augustose@gmail.com>"
    echo "License: Apache License 2.0"
    echo "GitHub: https://github.com/augustose/ssh-config"
}

# Add new configuration
add_config() {
    echo "Adding new SSH configuration..."
    
    # Request necessary information
    read -p "Host name (alias): " host_name
    read -p "Server address (hostname/IP): " host_address
    read -p "SSH user: " user
    read -p "SSH port [22]: " port
    port=${port:-22}
    read -p "Use a specific key file? (y/n): " use_key
    
    # Create the configuration
    echo -e "\nHost $host_name" >> "$CONFIG_FILE"
    echo "    HostName $host_address" >> "$CONFIG_FILE"
    echo "    User $user" >> "$CONFIG_FILE"
    echo "    Port $port" >> "$CONFIG_FILE"
    
    if [[ "$use_key" == "y" || "$use_key" == "Y" ]]; then
        read -p "Path to private key file: " key_file
        echo "    IdentityFile $key_file" >> "$CONFIG_FILE"
    fi
    
    # Additional options
    read -p "Add additional options? (y/n): " add_options
    if [[ "$add_options" == "y" || "$add_options" == "Y" ]]; then
        read -p "Use ForwardAgent? (y/n): " forward_agent
        if [[ "$forward_agent" == "y" || "$forward_agent" == "Y" ]]; then
            echo "    ForwardAgent yes" >> "$CONFIG_FILE"
        fi
        
        read -p "Use ServerAliveInterval? (y/n): " server_alive
        if [[ "$server_alive" == "y" || "$server_alive" == "Y" ]]; then
            echo "    ServerAliveInterval 60" >> "$CONFIG_FILE"
        fi
    fi
    
    echo -e "\nConfiguration added successfully."
    echo "You can now connect using: ssh $host_name"
}

# Comment out an existing configuration
comment_config() {
    if [ -z "$1" ]; then
        read -p "Host name to comment out: " host_name
    else
        host_name="$1"
    fi
    
    # Check if the host exists
    if ! grep -q "^Host $host_name$" "$CONFIG_FILE"; then
        echo "Error: Configuration for host '$host_name' not found."
        exit 1
    fi
    
    # Create temporary file
    temp_file=$(mktemp)
    
    # Comment out the configuration
    awk -v host="$host_name" '
    BEGIN { commenting = 0; }
    /^Host '"$host_name"'$/ { 
        print "# " $0; 
        commenting = 1; 
        next;
    }
    /^Host / { commenting = 0; }
    { 
        if (commenting) 
            print "# " $0; 
        else 
            print $0; 
    }' "$CONFIG_FILE" > "$temp_file"
    
    # Replace the original file
    mv "$temp_file" "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"
    
    echo "Configuration for '$host_name' commented out successfully."
}

# List all configurations
list_configs() {
    echo "Available SSH configurations:"
    echo "--------------------------------"
    
    # Search for all hosts not commented out
    grep -n "^Host " "$CONFIG_FILE" | while read -r line; do
        line_num=$(echo "$line" | cut -d: -f1)
        host_name=$(echo "$line" | cut -d: -f2- | sed 's/Host //')
        
        echo "[$line_num] $host_name"
        
        # Show details of each host
        next_host=$(grep -n "^Host " "$CONFIG_FILE" | awk -v current="$line_num" '{if ($1 > current) {print $1; exit}}' | cut -d: -f1)
        if [ -z "$next_host" ]; then
            sed -n "$((line_num+1)),\$p" "$CONFIG_FILE" | grep -E "^\s+[A-Za-z]" | sed 's/^/    /'
        else
            sed -n "$((line_num+1)),$((next_host-1))p" "$CONFIG_FILE" | grep -E "^\s+[A-Za-z]" | sed 's/^/    /'
        fi
        echo ""
    done
    
    # If no configurations
    if ! grep -q "^Host " "$CONFIG_FILE"; then
        echo "No SSH configurations defined."
    fi
}

# Edit the config file with VI
edit_config() {
    ensure_config_file
    vi "$CONFIG_FILE"
}

# Update an existing configuration
update_config() {
    ensure_config_file
    
    # List available hosts
    echo "Available hosts to update:"
    hosts=()
    while IFS= read -r line; do
        hosts+=("$line")
    done < <(grep -E '^Host ' "$CONFIG_FILE" | sed 's/^Host //')
    if [ ${#hosts[@]} -eq 0 ]; then
        echo "No hosts to update."
        exit 1
    fi
    i=0
    for host in "${hosts[@]}"; do
        i=$((i+1))
        printf "%d) %s\n" "$i" "$host"
    done
    read -p "Select the number of the host to modify: " idx
    idx=$((idx-1))
    if [ -z "${hosts[$idx]}" ]; then
        echo "Invalid selection."
        exit 1
    fi
    host_name="${hosts[$idx]}"

    # Extract current configuration
    start_line=$(grep -n "^Host $host_name$" "$CONFIG_FILE" | cut -d: -f1)
    next_host_line=$(grep -n "^Host " "$CONFIG_FILE" | awk -v current="$start_line" -F: '{if ($1 > current) {print $1; exit}}')
    if [ -z "$next_host_line" ]; then
        end_line=$(wc -l < "$CONFIG_FILE")
    else
        end_line=$((next_host_line-1))
    fi
    config_block=$(sed -n "${start_line},${end_line}p" "$CONFIG_FILE")

    # Request new parameters
    current_host=$(echo "$config_block" | grep -E '^\s*HostName ' | awk '{print $2}')
    current_user=$(echo "$config_block" | grep -E '^\s*User ' | awk '{print $2}')
    current_port=$(echo "$config_block" | grep -E '^\s*Port ' | awk '{print $2}')
    current_key=$(echo "$config_block" | grep -E '^\s*IdentityFile ' | awk '{print $2}')
    current_forward=$(echo "$config_block" | grep -E '^\s*ForwardAgent ' | awk '{print $2}')
    current_alive=$(echo "$config_block" | grep -E '^\s*ServerAliveInterval ' | awk '{print $2}')

    read -p "Server address (hostname/IP) [$current_host]: " host_address
    host_address=${host_address:-$current_host}
    read -p "SSH user [$current_user]: " user
    user=${user:-$current_user}
    read -p "SSH port [$current_port]: " port
    port=${port:-$current_port}
    read -p "Use a specific key file? (y/n) [$( [ -n "$current_key" ] && echo y || echo n )]: " use_key
    if [[ "$use_key" == "y" || "$use_key" == "Y" ]]; then
        read -p "Path to private key file [$current_key]: " key_file
        key_file=${key_file:-$current_key}
    else
        key_file=""
    fi
    read -p "Use ForwardAgent? (y/n) [$( [ "$current_forward" == "yes" ] && echo y || echo n )]: " forward_agent
    if [[ "$forward_agent" == "y" || "$forward_agent" == "Y" ]]; then
        forward_agent_val="    ForwardAgent yes"
    else
        forward_agent_val=""
    fi
    read -p "Use ServerAliveInterval? (y/n) [$( [ -n "$current_alive" ] && echo y || echo n )]: " server_alive
    if [[ "$server_alive" == "y" || "$server_alive" == "Y" ]]; then
        server_alive_val="    ServerAliveInterval 60"
    else
        server_alive_val=""
    fi

    # Build new block
    new_block="Host $host_name\n    HostName $host_address\n    User $user\n    Port $port"
    if [ -n "$key_file" ]; then
        new_block+="\n    IdentityFile $key_file"
    fi
    if [ -n "$forward_agent_val" ]; then
        new_block+="\n$forward_agent_val"
    fi
    if [ -n "$server_alive_val" ]; then
        new_block+="\n$server_alive_val"
    fi

    # Replace block in file
    temp_file=$(mktemp)
    awk -v start="$start_line" -v end="$end_line" -v block="$new_block" 'NR==start{print block; skip=1} NR>start && NR<=end{next} {if(!skip)print $0; skip=0}' "$CONFIG_FILE" > "$temp_file"
    mv "$temp_file" "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"
    echo "Configuration for '$host_name' updated successfully."
}

# Main function
main() {
    ensure_config_file
    
    case "$1" in
        add|-a|a)
            add_config
            ;;
        comment|-c|c)
            comment_config "$2"
            ;;
        list|-l|l)
            list_configs
            ;;
        edit|-e|e)
            edit_config
            ;;
        update|-u|u)
            update_config
            ;;
        version|-v|v)
            show_version
            ;;
        help|-h|h)
            show_help
            ;;
        *)
            show_help
            exit 1
            ;;
    esac
}

# Run the script
main "$@"

